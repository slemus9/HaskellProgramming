
==================== FINAL INTERFACE ====================
2018-07-08 23:31:21.7148346 UTC

interface main:Main 8022
  interface hash: b1af9d5588ceb2e537d6530926be7a60
  ABI hash: 08d04d5a4f21f891f3d3f731a0c7f712
  export-list hash: 28c30b5cf4d29687aadb4197f05940a5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab8481e57df597ccb85a1e7ea3a57efc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allWords
  Main.alreadyGuessed
  Main.charInWord
  Main.fillInCharacter
  Main.freshPuzzle
  Main.gameOver
  Main.gameWin
  Main.gameWords
  Main.getNumIncorrect
  Main.handleGuess
  Main.isCorrect
  Main.main
  Main.maxWordLength
  Main.minWordLength
  Main.randomWord
  Main.randomWord'
  Main.renderPuzzleChar
  Main.runGame
  Main.Guess{Main.Correct Main.Incorrect}
  Main.Puzzle{Main.Puzzle}
  Main.WordList
module dependencies:
package dependencies: Win32-2.5.4.1 array-0.5.2.0 base-4.10.1.0*
                      deepseq-1.4.3.0 ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 random-1.1*
                      time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Control.Monad 0557f10d93e84201ae1d619074f2aa0b
import  -/  base-4.10.1.0:Data.Char 9dba16913a6ef0862b65389e7f361a31
import  -/  base-4.10.1.0:Data.Foldable 4349255461f1285ad885cd2301205c36
import  -/  base-4.10.1.0:Data.List e5312e282ad78d8152090e079f862b53
import  -/  base-4.10.1.0:Data.Maybe f51a1c24c4c11dca22ee9c2ea0071a10
import  -/  base-4.10.1.0:Data.OldList fdea655c7bec488a3994df222c677ab7
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.List 1bb0adf79553530dc898796596e53188
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:GHC.Show 927ef590f679632bf94869e8018e5b48
import  -/  base-4.10.1.0:GHC.Unicode 7cf9b8b35309e220f8e4073dcd6dbd74
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  base-4.10.1.0:System.Exit c6d799ab7b4a533dd613584a0c7e1425
import  -/  base-4.10.1.0:System.IO 1fb8f1d116df69c8750950ac088a90e6
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  random-1.1:System.Random 51fb561c639e37ae48a8c45d441a262a
290e7b677cb21cd372034e5e70ebd7fc
  $fShowGuess :: GHC.Show.Show a => GHC.Show.Show (Main.Guess a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,C(U),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Main.Guess a)
                  (Main.$fShowGuess_$cshowsPrec @ a v)
                  (Main.$fShowGuess_$cshow @ a v)
                  (Main.$fShowGuess_$cshowList @ a v) -}
396cfd3787bd4a323414e7c093d80a1a
  $fShowGuess1 ::
    Main.Guess GHC.Types.Char -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (x :: Main.Guess GHC.Types.Char)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x of wild {
                   Main.Correct g
                   -> case g of wild1 { GHC.Types.C# ds ->
                      case ds of ds1 {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShowChar3
                                (GHC.Show.$wshowLitChar ds1 Main.$fShowGuess2))
                             s
                        '\''# -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowChar1 s } }
                   Main.Incorrect g
                   -> case g of wild1 { GHC.Types.C# ds ->
                      case ds of ds1 {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShowChar3
                                (GHC.Show.$wshowLitChar ds1 Main.$fShowGuess2))
                             s
                        '\''#
                        -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowChar1 s } } }) -}
ea73f74eeb7857ea05c0052d3746c214
  $fShowGuess2 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShowChar3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
290e7b677cb21cd372034e5e70ebd7fc
  $fShowGuess_$cshow ::
    GHC.Show.Show a => Main.Guess a -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LC(S)L),1*U(A,1*C1(U),A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (ds :: Main.Guess a) ->
                 case ds of wild {
                   Main.Correct g -> GHC.Show.show @ a $dShow g
                   Main.Incorrect g -> GHC.Show.show @ a $dShow g }) -}
290e7b677cb21cd372034e5e70ebd7fc
  $fShowGuess_$cshowList ::
    GHC.Show.Show a => [Main.Guess a] -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(A,C(U),A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Main.Guess a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Guess a)
                   (\ (x :: Main.Guess a) (s1 :: GHC.Base.String)[OneShot] ->
                    case x of wild {
                      Main.Correct g
                      -> GHC.Base.++ @ GHC.Types.Char (GHC.Show.show @ a $dShow g) s1
                      Main.Incorrect g
                      -> GHC.Base.++ @ GHC.Types.Char (GHC.Show.show @ a $dShow g) s1 })
                   ls
                   s) -}
290e7b677cb21cd372034e5e70ebd7fc
  $fShowGuess_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Main.Guess a -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)L),1*U(A,1*C1(U),A)><L,A><S,1*U><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Guess a)
                   (w3 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec @ a w w2 w3) -}
3d8d161252065964290164296d9b58cb
  $fShowPuzzle :: GHC.Show.Show Main.Puzzle
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Puzzle
                  Main.$fShowPuzzle_$cshowsPrec
                  Main.$fShowPuzzle_$cshow
                  Main.$fShowPuzzle_$cshowList -}
3d8d161252065964290164296d9b58cb
  $fShowPuzzle1 :: Main.Puzzle -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,1*U)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.Puzzle) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Main.$fShowPuzzle_$cshow x))
                   s) -}
1eb79a4c69fd077b64d53c8b10d4cb71
  $fShowPuzzle2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
ab23a37caca9b63441cd2c74d7661d40
  $fShowPuzzle3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   GHC.Show.showList__4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
375c313dc3a02308acaa7f935e6de0ad
  $fShowPuzzle4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Guessed so far: "#) -}
3d8d161252065964290164296d9b58cb
  $fShowPuzzle_$cshow :: Main.Puzzle -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LSL),1*U(A,1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Puzzle) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$w$cshow ww2 ww3 }) -}
3d8d161252065964290164296d9b58cb
  $fShowPuzzle_$cshowList :: [Main.Puzzle] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Puzzle]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Puzzle Main.$fShowPuzzle1 ls s) -}
3d8d161252065964290164296d9b58cb
  $fShowPuzzle_$cshowsPrec ::
    GHC.Types.Int -> Main.Puzzle -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S(LSL),1*U(A,1*U,1*U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Main.Puzzle)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Main.$fShowPuzzle_$cshow x))
                   s) -}
e29138cb20f9151263927186a88eb406
  $fShowPuzzle_showl ::
    [Main.Guess GHC.Types.Char] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2 -}
efea5ab72cd538020b2289501a6abf5e
  $tc'Correct :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10370638327973629303##
                   13093548108663786984##
                   Main.$trModule
                   Main.$tc'Correct2
                   1#
                   Main.$tc'Correct1) -}
812f633f654ca215cbc1decd646a998d
  $tc'Correct1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0d2137b9d918cae9a15f750b4555911a
  $tc'Correct2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Correct3) -}
c80122164ee3bfe8df6363c582c5e147
  $tc'Correct3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Correct"#) -}
1264852fe62f09a0830dc4cacfc900c3
  $tc'Incorrect :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2694038994976136444##
                   17349445788012635347##
                   Main.$trModule
                   Main.$tc'Incorrect1
                   1#
                   Main.$tc'Correct1) -}
cccd16c570e249c04b142ab837ce1d16
  $tc'Incorrect1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Incorrect2) -}
8cb986b971c72fbf76405697b93f78e5
  $tc'Incorrect2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Incorrect"#) -}
40e294482e3c186c6035d232663afc2c
  $tc'Puzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1873292189318166999##
                   791087988565883416##
                   Main.$trModule
                   Main.$tc'Puzzle2
                   0#
                   Main.$tc'Puzzle1) -}
b090470d60355882046d7454d41a51be
  $tc'Puzzle1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
55ad0a4456f725e2289045efd84cbcac
  $tc'Puzzle2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Puzzle3) -}
ccbb1a941a4a1338e58cfa4d6ed22d08
  $tc'Puzzle3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Puzzle"#) -}
d7ff4817dcc1020e98518ad354cf57ca
  $tcGuess :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4452381109931441676##
                   12480292466355512085##
                   Main.$trModule
                   Main.$tcGuess1
                   0#
                   GHC.Types.krep$*Arr*) -}
abd7486a89b96a6c12bebbfe46672856
  $tcGuess1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcGuess2) -}
cbc2e704934ab84ca3e826a3155661fc
  $tcGuess2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Guess"#) -}
9c622fbdf0f78e349a78e8102ded6c8f
  $tcPuzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12504372730337297243##
                   8030320636282516161##
                   Main.$trModule
                   Main.$tcPuzzle1
                   0#
                   GHC.Types.krep$*) -}
ea3c2a8a13b57da3b42d1acddb73aef9
  $tcPuzzle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcPuzzle2) -}
3a89c5d17146444839a59b635f302ab7
  $tcPuzzle2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Puzzle"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
89711da0768c194df16593fd98c44fa6
  $w$cshow ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> [Main.Guess GHC.Types.Char] -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww1 :: [Main.Guess GHC.Types.Char]) ->
                 let {
                   n :: [GHC.Types.Char]
                   = GHC.CString.unpackAppendCString#
                       Main.$fShowPuzzle4
                       (case ww1 of wild {
                          [] -> Main.$fShowPuzzle3
                          : x xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Main.$fShowGuess1 x (Main.$fShowPuzzle_showl xs)) })
                 } in
                 case GHC.Base.map
                        @ (GHC.Base.Maybe GHC.Types.Char)
                        @ GHC.Types.Char
                        Main.renderPuzzleChar
                        ww of wild {
                   [] -> n
                   : x xs
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.:
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll @ GHC.Types.Char Main.$fShowPuzzle2 xs))
                        n }) -}
290e7b677cb21cd372034e5e70ebd7fc
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    Main.Guess a -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)L),1*U(A,1*C1(U),A)><S,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: Main.Guess a)
                   (w2 :: GHC.Base.String) ->
                 case w1 of wild {
                   Main.Correct g
                   -> GHC.Base.++ @ GHC.Types.Char (GHC.Show.show @ a w g) w2
                   Main.Incorrect g
                   -> GHC.Base.++ @ GHC.Types.Char (GHC.Show.show @ a w g) w2 }) -}
a3a55e8c7bf2f337c389baf9554c02f4
  $wfillInCharacter ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [Main.Guess GHC.Types.Char]
    -> GHC.Types.Char
    -> (# GHC.Base.String, [GHC.Base.Maybe GHC.Types.Char],
          [Main.Guess GHC.Types.Char] #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,1*U><L,U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww2 :: [Main.Guess GHC.Types.Char])
                   (w :: GHC.Types.Char) ->
                 (# ww,
                    GHC.List.zipWith
                      @ GHC.Types.Char
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ (wordChar :: GHC.Types.Char)
                         (guessChar :: GHC.Base.Maybe GHC.Types.Char)[OneShot] ->
                       case wordChar of wild { GHC.Types.C# x ->
                       case w of wild1 { GHC.Types.C# y ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.eqChar# x y) of wild2 {
                         GHC.Types.False -> guessChar
                         GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild } } })
                      ww
                      ww1,
                    case GHC.List.elem
                           @ GHC.Types.Char
                           GHC.Classes.$fEqChar
                           w
                           ww of wild {
                      GHC.Types.False
                      -> GHC.Types.:
                           @ (Main.Guess GHC.Types.Char)
                           (Main.Incorrect @ GHC.Types.Char w)
                           ww2
                      GHC.Types.True
                      -> GHC.Types.:
                           @ (Main.Guess GHC.Types.Char)
                           (Main.Correct @ GHC.Types.Char w)
                           ww2 } #)) -}
63735d18123ea78b4a2760668f1b93c0
  $wgameOver ::
    GHC.Base.String
    -> [Main.Guess GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [Main.Guess GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.$wgo ww1 of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 7#) of wild {
                   GHC.Types.False -> (# w, GHC.Tuple.() #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.gameOver3
                             GHC.Types.True
                             w of ds1 { (#,#) ipv ipv1 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.CString.unpackAppendCString# Main.gameOver2 ww)
                             GHC.Types.True
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      System.Exit.exitSuccess1 @ () ipv2 } } } }) -}
4ec4bfa979aa1cd0aeeed3ad35d41aab
  $wgameWin ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.Maybe GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            Main.gameWin2
                            GHC.Types.True
                            w of ds1 { (#,#) ipv ipv1 ->
                     System.Exit.exitSuccess1 @ () ipv }
                 } in
                 letrec {
                   go :: [GHC.Base.Maybe GHC.Types.Char]
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Base.Maybe GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> $j
                       : y ys
                       -> case y of wild1 {
                            GHC.Base.Nothing -> (# w, GHC.Tuple.() #)
                            GHC.Base.Just ipv -> go ys } }
                 } in
                 go ww) -}
38d34e5118860100b41384e3882809e0
  $wgetNumIncorrect :: [Main.Guess GHC.Types.Char] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
485157950cbed79fb08f24def59b7f39
  $wgo :: [Main.Guess GHC.Types.Char] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
fc89d71edb3c058fdd2fd1dfd7ebcbe5
  $wrunGame ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [Main.Guess GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><S,U><S,U>, Inline: [0] -}
290e7b677cb21cd372034e5e70ebd7fc
  data Guess a = Correct a | Incorrect a
3d8d161252065964290164296d9b58cb
  data Puzzle
    = Puzzle GHC.Base.String
             [GHC.Base.Maybe GHC.Types.Char]
             [Main.Guess GHC.Types.Char]
bebf37640b67bf35d63fd2c6a1d568f7
  type WordList = [GHC.Base.String]
843ab21674097952ea8a70cea8e6740a
  allWords :: GHC.Types.IO Main.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.allWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.WordList>_R)) -}
2a5055e1a393681bddbc1798ae99a854
  allWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv2 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv2
                        ipv of ds2 { (#,#) ipv1 ipv3 ->
                 (# ipv1, Data.OldList.lines ipv3 #) } }) -}
a70cef1a31f1e7aba13b03cd32752818
  allWords2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.allWords3) -}
58ae9e0d864ef61efbd76533a9ad195e
  allWords3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("data/dict.txt"#) -}
f04dfc9ccf1521fe8cf4281b6f5c53ea
  alreadyGuessed :: Main.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(A,A,1*U)><L,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Puzzle) (c :: GHC.Types.Char) ->
                 case ds of wild { Main.Puzzle ds1 ds2 gs ->
                 Main.alreadyGuessed_elemInGuessed c gs }) -}
11ed6bcaa95cffe7565328fc89375f4a
  alreadyGuessed_elemInGuessed ::
    GHC.Types.Char -> [Main.Guess GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U> -}
837dabc01d88418f91b537623bd2b5e6
  charInWord :: Main.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Puzzle) (c :: GHC.Types.Char) ->
                 case ds of wild { Main.Puzzle s ds1 ds2 ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c s }) -}
62c6192bc84164dd1ed5833794010f16
  fillInCharacter :: Main.Puzzle -> GHC.Types.Char -> Main.Puzzle
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,1*U,U)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Types.Char) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 case Main.$wfillInCharacter
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Main.Puzzle ww5 ww6 ww7 } }) -}
3c06a72dac0ef4287161825f406308ce
  freshPuzzle :: GHC.Base.String -> Main.Puzzle
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 Main.Puzzle
                   s
                   (GHC.Base.build
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ @ b1
                         (c :: GHC.Base.Maybe GHC.Types.Char -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Base.Maybe GHC.Types.Char)
                            @ b1
                            @ GHC.Types.Char
                            c
                            Main.freshPuzzle1)
                         n
                         s))
                   (GHC.Types.[] @ (Main.Guess GHC.Types.Char))) -}
1e9e2f82a1608204a066fbbf88fb253d
  freshPuzzle1 :: GHC.Types.Char -> GHC.Base.Maybe GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Char) -> GHC.Base.Nothing @ GHC.Types.Char) -}
e4de7583dc860e8173fb10404625e57d
  gameOver :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLS),1*U(U,A,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameOver1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f852ea2e23f3e76f7d15340fe46cc82e
  gameOver1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LLS),1*U(U,A,1*U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wgameOver ww1 ww3 w1 }) -}
8103aea40525bc36cedd09ff2478bf1d
  gameOver2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The word was: "#) -}
fe2237f68d34dbc4faf84e98e7ab397c
  gameOver3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.gameOver4) -}
b26759bb9ca8fc3d3cbdf8b6bd691fe1
  gameOver4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You lose!"#) -}
1f4caec6241ecda7564bb5958a3df463
  gameWin :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameWin1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
fa81d433e855eebdea2969c64df350da
  gameWin1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wgameWin ww2 w1 }) -}
ea5f1fd9567f04155ba99ac55c790a1b
  gameWin2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.gameWin3) -}
7fb334eeb9461271fd8dcb18752ffc84
  gameWin3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You win!"#) -}
534f2c6735d76b75dcbdd8d201c9275b
  gameWords :: GHC.Types.IO Main.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.WordList>_R)) -}
48c1e77413be1a259496f362898bfad3
  gameWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv2 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv2
                        ipv of ds2 { (#,#) ipv1 ipv3 ->
                 (# ipv1,
                    GHC.Base.build
                      @ [GHC.Types.Char]
                      (\ @ b
                         (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ [GHC.Types.Char]
                         @ b
                         (GHC.List.filterFB
                            @ [GHC.Types.Char]
                            @ b
                            c
                            Main.gameWords_gameLength)
                         n
                         (Data.OldList.lines ipv3)) #) } }) -}
e35e369b3d078632d198186beadfeb01
  gameWords_gameLength :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 5#) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww2 10#) } }) -}
9ae57f06e342523b20f110dc1a962065
  getNumIncorrect :: [Main.Guess GHC.Types.Char] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Main.Guess GHC.Types.Char]) ->
                 case Main.$wgetNumIncorrect w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
69461fcd158c0e2084b4805afc0db8f6
  handleGuess ::
    Main.Puzzle -> GHC.Types.Char -> GHC.Types.IO Main.Puzzle
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleGuess1
                  `cast`
                (<Main.Puzzle>_R
                 ->_R <GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Puzzle>_R)) -}
50de2afd6d73477a97c9f27147f567b6
  handleGuess1 ::
    Main.Puzzle
    -> GHC.Types.Char
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Puzzle #)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: (\ (puzzle :: Main.Puzzle)
                   (guess :: GHC.Types.Char)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.handleGuess8
                           (GHC.Types.:
                              @ GHC.Types.Char
                              guess
                              (GHC.Types.[] @ GHC.Types.Char)))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case puzzle of wild { Main.Puzzle ds ds2 gs ->
                 case Main.alreadyGuessed_elemInGuessed guess gs of wild1 {
                   GHC.Types.False
                   -> case GHC.List.elem
                             @ GHC.Types.Char
                             GHC.Classes.$fEqChar
                             guess
                             ds of wild2 {
                        GHC.Types.False
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleGuess6
                                  GHC.Types.True
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              case Main.$wfillInCharacter
                                     ds
                                     ds2
                                     gs
                                     guess of ww { (#,,#) ww1 ww2 ww3 ->
                              Main.Puzzle ww1 ww2 ww3 } #) }
                        GHC.Types.True
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleGuess4
                                  GHC.Types.True
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              case Main.$wfillInCharacter
                                     ds
                                     ds2
                                     gs
                                     guess of ww { (#,,#) ww1 ww2 ww3 ->
                              Main.Puzzle ww1 ww2 ww3 } #) } }
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.handleGuess2
                             GHC.Types.True
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      (# ipv2, wild #) } } } }) -}
6c3b52c51b7912aedbf8cdc958a1e103
  handleGuess2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.handleGuess3) -}
50f4c2f4aca51017b199f4d3c342dffa
  handleGuess3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("You already guessed that character, pick something else!"#) -}
c9ba65c94004afc527ff7bfe0ec5584c
  handleGuess4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.handleGuess5) -}
d05c570bdcba6a106d512098e16467cf
  handleGuess5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("This character was in the word, filling in the word accordingly"#) -}
f8f48216526798efc285abc9d27b79a9
  handleGuess6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.handleGuess7) -}
f03915b80740193decfdd50329c501e6
  handleGuess7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("This character wasn't in the word, try again."#) -}
1fc6081417102a9dc6d7b06eb14d87f6
  handleGuess8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Your guess was: "#) -}
954d8ff2ad8c21f1e8273dd6e000e576
  isCorrect :: Main.Guess GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Guess GHC.Types.Char) ->
                 case ds of wild {
                   Main.Correct ds1 -> GHC.Types.True
                   Main.Incorrect ipv -> GHC.Types.False }) -}
791ba322983b8aa0d972134520c3e6d3
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
c2c21526600ccdf1bdedc69d85198cbf
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv2 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv2
                        ipv of ds2 { (#,#) ipv1 ipv3 ->
                 let {
                   wl :: Main.WordList
                   = GHC.List.filter
                       @ [GHC.Types.Char]
                       Main.gameWords_gameLength
                       (Data.OldList.lines ipv3)
                 } in
                 case System.Random.$fRandomInt3
                        (Main.main2,
                         case GHC.List.$wlenAcc @ [GHC.Types.Char] wl 0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        ipv1 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   s1 :: GHC.Base.String
                   = case ipv5 of ww { GHC.Types.I# ww1 ->
                     GHC.Base.map
                       @ GHC.Types.Char
                       @ GHC.Types.Char
                       GHC.Unicode.toLower
                       (GHC.List.$w!! @ GHC.Base.String wl ww1) }
                 } in
                 Main.$wrunGame
                   s1
                   (GHC.Base.map
                      @ GHC.Types.Char
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      Main.freshPuzzle1
                      s1)
                   (GHC.Types.[] @ (Main.Guess GHC.Types.Char))
                   ipv4 } } }) -}
183184eb38285c7bd39e3c385cedabd5
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
c557d066ac98eed0934c409febe909f6
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
95046135ac29105da71194e43979a4d5
  maxWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
b0db760dbf91614cf0e5d73ca129a7d1
  minWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
296f93be33a8230af347cd3cf823d03c
  randomWord :: Main.WordList -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomWord1
                  `cast`
                (<Main.WordList>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
8452d29c25c1fafb2f98333952301c35
  randomWord' :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomWord'1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
44a4b52ded7ae295bdef32e475930877
  randomWord'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv2 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv2
                        ipv of ds2 { (#,#) ipv1 ipv3 ->
                 Main.randomWord1
                   (GHC.Base.build
                      @ [GHC.Types.Char]
                      (\ @ b
                         (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ [GHC.Types.Char]
                         @ b
                         (GHC.List.filterFB
                            @ [GHC.Types.Char]
                            @ b
                            c
                            Main.gameWords_gameLength)
                         n
                         (Data.OldList.lines ipv3)))
                   ipv1 } }) -}
39aaedcede9a64bedb58d38d2d36f275
  randomWord1 ::
    Main.WordList
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (wl :: Main.WordList)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.$fRandomInt3
                        (Main.main2,
                         case GHC.List.$wlenAcc @ [GHC.Types.Char] wl 0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.List.!! @ GHC.Base.String wl ipv1 #) }) -}
2263386b9a5dc22c59823cc0de2e34b1
  renderPuzzleChar :: GHC.Base.Maybe GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Char) ->
                 case ds of wild {
                   GHC.Base.Nothing -> Main.renderPuzzleChar1
                   GHC.Base.Just c -> c }) -}
82b402978805b229abf1e01b5a7db1d3
  renderPuzzleChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '_'#) -}
8b378840e3d842d11a67e56e98148ed5
  runGame :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLS),1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runGame1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1a72de8d0cb6f68edaf207cc0e03901f
  runGame1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LLS),1*U(U,U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wrunGame ww1 ww2 ww3 w1 }) -}
instance [safe] GHC.Show.Show [Main.Guess] = Main.$fShowGuess
instance [safe] GHC.Show.Show [Main.Puzzle] = Main.$fShowPuzzle
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

